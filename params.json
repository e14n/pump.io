{"name":"pump.io","body":"# pump.io\r\n\r\nVersion 0.1.0\r\n\r\nThis is pump.io. It's a stream server that does most of what people\r\nreally want from a social network.\r\n\r\n[![Build Status](https://secure.travis-ci.org/e14n/pump.io.png)](http://travis-ci.org/e14n/pump.io)\r\n\r\n## License\r\n\r\nCopyright 2011-2012, StatusNet Inc.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n## What's it for?\r\n\r\nI post something and my followers see it. That's the rough idea behind\r\nthe pump.\r\n\r\nThere's an API defined in the API.md file. It uses activitystrea.ms\r\nJSON as the main data and command format.\r\n\r\nYou can post almost anything that can be represented with activity\r\nstreams -- short or long text, bookmarks, images, video, audio,\r\nevents, geo checkins. You can follow friends, create lists of people,\r\nand so on.\r\n\r\nThe software is useful for at least these scenarios:\r\n\r\n* Mobile-first social networking\r\n* Activity stream functionality for an existing app\r\n* Experimenting with social software\r\n\r\nVersion 0.2.0 will have a Web UI, which will probably make the whole\r\nthing much more enjoyable.\r\n\r\n## Installation\r\n\r\nYou'll need three things to get started:\r\n\r\n* node.js 0.8.0 or higher\r\n* npm 1.1.0 or higher\r\n* A database server (see below)\r\n\r\nThe easiest way is to install the software globally using npm, like\r\nso:\r\n\r\n    npm install -g pump.io\r\n\r\nThat should set up all the files and dependencies for you.\r\n\r\n### Local install\r\n\r\nIf you want to set up the software in its own directory, you can clone\r\nthe git repository, so:\r\n\r\n    git clone https://github.com/e14n/pump.io.git\r\n    \r\nYou can then install the dependencies using `npm`:\r\n\r\n    cd pump.io\r\n    npm install\r\n\r\nTo test the install, run:\r\n\r\n    npm test\r\n    \r\n### Database setup\r\n\r\npump.io uses [databank](https://github.com/evanp/databank)\r\npackage to abstract out the data storage for the system. Any databank\r\ndriver should work. Couchbase, MongoDB and Redis are probably the best\r\nbets for production servers, but the `disk` or even `memory` drivers\r\ncan work for testing.\r\n\r\nIf you're confused, just use the MongoDB one, `databank-mongodb`.\r\n\r\nYou can find other drivers like so:\r\n\r\n    npm search databank\r\n\r\nOne tricky bit is that the driver you use has to be available to the\r\n`databank` package. There are two ways to make that work.\r\n\r\nFirst, you can install globally. For example:\r\n\r\n    npm install -g databank-mongodb\r\n\r\nUse this if you installed the pump.io package globally.\r\n\r\nSecond, you can install in the `databank` directory.\r\n\r\n    cd pump.io/node_modules/databank\r\n    npm install databank-mongodb\r\n\r\nNote that you also need to install and configure your database server.\r\n\r\n### Configuration\r\n\r\npump.io uses a JSON file for configuration. It should be at\r\n`/etc/pump.io.json`.\r\n\r\nThe `pump.io.json.sample` file should give you an idea of how to use\r\nit.\r\n\r\nHere are the main configuration keys.\r\n\r\n* *driver* The databank driver you're using. Defaults to \"disk\", which\r\n  is probably going to be terrible.\r\n* *params* Databank driver params; see the databank driver README for\r\n   details on what to put here.\r\n* *hostname* The hostname of the server. Defaults to \"localhost\" which\r\n   doesn't do much for you.\r\n* *port* Port to listen on. Defaults to 31337, which is no good. You\r\n   should listen on 80 or 443 if you're going to have anyone use this.\r\n* *secret* A session-generating secret, server-wide password.\r\n* *noweb* Hide the Web interface. Since it's disabled for this release,\r\n  this shouldn't cause you any problems.\r\n* *site* Name of the server, like \"My great social service\".\r\n* *owner* Name of owning entity, if you want to link to it.\r\n* *ownerURL* URL of owning entity, if you want to link to it.\r\n* *nologger* If you're debugging or whatever, turn off\r\n  logging. Defaults to false (leave logging on).\r\n* *serverUser* If you're listening on a port lower than 1024, you need\r\n  to be root. Set this to the name of a user to change to after the\r\n  server is listening. `daemon` or `nobody` are good choices, or you\r\n  can create a user like `pump` and use that.\r\n* *key* If you're using SSL, the path to the server key, like\r\n   \"/etc/ssl/private/myserver.key\".\r\n* *cert* If you're using SSL, the path to the server cert, like\r\n   \"/etc/ssl/private/myserver.crt\".\r\n\r\n## Bugs\r\n\r\nIf you find bugs, you can report them here:\r\n\r\nhttps://github.com/e14n/pump.io/issues\r\n\r\nYou can also email me at evan@e14n.com.\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Social server with an ActivityStreams API","google":""}