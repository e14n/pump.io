#!/usr/bin/env node

// -*- mode: javascript -*-

// registeruser.js
//
// Register a new user with the activity pump
//
// Copyright 2011-2012, E14N https://e14n.com/
//           2013, Intevation GmbH Mathias Gebbe
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

var _ = require("underscore"),
    url = require("url"),
    Step = require("step"),
    readline = require('readline'),
    common = require("../lib/pumpclient"),
    clientCred = common.clientCred,
    setUserCred = common.setUserCred,
    postJSON = common.postJSON,
    argv = require("optimist")
        .usage("Usage: $0 -u <nickname>")
        .demand(["u"])
        .alias("u", "username")
        .alias("p", "password")
        .alias("s", "server")
        .alias("P", "port")
        .alias("a", "adminpw")
        .alias("e", "email")
        .alias("v", "verbose")
        .describe("u", "Username to register")
        .describe("p", "Password for user")
        .describe("s", "Server name")
        .describe("P", "Port")
        .describe("e", "User email address")
        .describe("a", "Admin Password")
        .describe("v", "Verbose")
        .default("P", 443)
        .default("s", "io.intevation.de")
        .argv;

var user = {"nickname": argv.u};

var server = argv.s;
var port = argv.P;
var verbose = argv.v

var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});


Step(
    function(){
     var callback=this;
      if(argv.a === undefined) {
        rl.question("Enter the admin password: ", function(adminpw) {
        adminpw.trim();
        user.adminpw=adminpw;
        callback();
        });
      }else{
        user.adminpw = argv.a;
        callback();
	}
},
    function(){
     var callback=this;
        if(argv.e === undefined) {
          rl.question("Enter email address for user "+user.nickname+": ", function(email) {
          email.trim();
          user.email = email;
          callback();
        });   
         }else{
          user.email = argv.e;
          callback();
       }
    
    },
    function(){
     var callback=this;
        if(argv.p === undefined) {
          rl.question("Enter password for user "+user.nickname+": ", function(password) {
          password.trim();
          user.password = password;
          callback();
        });
         }else{
          user.password = argv.p;
	  callback();
       }

    },
    function() {
        clientCred(server, this);
    },
    function(err, cred) {
        if (err) throw err;
        var endpoint = url.format({
            protocol: ((port == 443) ? "https" : "http"),
            host: ((port == 80) ? server : server + ":" + port),
            pathname: "/api/users"
        });
        postJSON(endpoint, cred, user, this);
    },
    function(err, body, result) {
        if (err) {
            console.error(err);
            process.exit(0);
        } else {
            setUserCred(body.nickname, server, {token: body.token, token_secret: body.secret}, this);
            if(verbose) console.log(body);
             else console.log("OK");
	    process.exit(0);
        }
    }
);
